"use strict";(function(){const t={cache:!0};t.doc={id:"id",field:["title","content"],store:["title","href","section"]};const e=FlexSearch.create("balance",t);window.bookSearchIndex=e,e.add({id:0,href:"/study-csharp/docs/basic/",title:"第一部分 基础入门",section:"Docs",content:` .Net Framework, .NET Standard, .Net Core, Mono 是什么关系？ # .NET 是规范，其他是实现 由于 .NET 对库函数的引用类似动态链接库，程序集内并不包含库函数的实现，只包含库函数的签名，然后运行的时候才去加载对应的有实现的程序集完成“链接”过程最后调用 再后来 mono 和 .NET Core 完成了基础库的统一，变成了新的 .NET，于是 .NET Standard 的使命也结束了，只剩下一个统一的 .NET 最开始 .NET Framework 只支持 Windows 而 mono 是一个社区的跨平台实现 mono 能跑大部分的 .NET Framework 程序集 mono 也不能跑 .NET Core 的程序集 后来出了个 .NET Core 跨平台了 无法跑 .NET Framework 程序集 无法跑 mono 程序集 .NET Standard .NET Standard 参考三个实现的情况，划定了一组 API 的子集，这组 API 在 .NET Framework、mono 和 .NET Core 上都有实现 然后使 .NET Framework、mono 和 .NET Core 都能加载 .NET Standard 程序集 这样当用户调用 .NET Standard 里的 API 的时候，会把调用转发到当前运行时的基础库的实现上 只要用户的代码基于 .NET Standard 编写，就能同时在 .NET Framework、mono、.NET Core 上跑了 后来到了 .NET Standard 2.1 的时候，由于 .NET Framework 掉了队，不再新增新的功能，于是 .NET Standard 2.1 干脆不支持 .NET Framework 了，只支持 mono 和 .NET Core 参考：
已经有了 mono，为什么还要搞一个.net core？ .NET Standard 和.NET Core 区别? `}),e.add({id:4,href:"/study-csharp/docs/basic/grammar/",title:"1.1 语法",section:"第一部分 基础入门",content:" 语法 # "}),e.add({id:5,href:"/study-csharp/docs/basic/grammar/type/",title:"1.1.1 数据类型",section:"1.1 语法",content:" 数据类型 # "}),e.add({id:6,href:"/study-csharp/docs/advanced/pattern/",title:"2.1 设计模式",section:"第二部分 进阶实战",content:" 设计模式 # "}),e.add({id:7,href:"/study-csharp/docs/design/type/",title:"3.1 数据类型",section:"第三部分 设计与实现",content:" 数据类型 # "}),e.add({id:8,href:"/study-csharp/docs/appendix/tutorial/",title:"4.1 教程",section:"第四部分 附录",content:" 教程 # 基础 # 进阶 # "}),e.add({id:9,href:"/study-csharp/docs/basic/grammar/keyword/",title:"1.1.2 关键字",section:"1.1 语法",content:" 关键字 # "}),e.add({id:10,href:"/study-csharp/docs/basic/std/",title:"1.2 标准库",section:"第一部分 基础入门",content:" 标准库 # "}),e.add({id:11,href:"/study-csharp/docs/advanced/algs/",title:"2.2 算法实现",section:"第二部分 进阶实战",content:" 算法实现 # "}),e.add({id:12,href:"/study-csharp/docs/design/keyword/",title:"3.2 关键字",section:"第三部分 设计与实现",content:" 关键字 # "}),e.add({id:13,href:"/study-csharp/docs/appendix/interview/",title:"4.2 面试题",section:"第四部分 附录",content:" 面试题 # 基础题 # 进阶题 # "}),e.add({id:14,href:"/study-csharp/docs/basic/spec/",title:"1.3 编程规范",section:"第一部分 基础入门",content:" 编程规范 # "}),e.add({id:15,href:"/study-csharp/docs/advanced/pkg/",title:"2.3 常用库",section:"第二部分 进阶实战",content:" 常用库 # "}),e.add({id:16,href:"/study-csharp/docs/design/runtime/",title:"3.3 运行时",section:"第三部分 设计与实现",content:" 运行时 # "}),e.add({id:17,href:"/study-csharp/docs/appendix/attention/",title:"4.3 关注项目",section:"第四部分 附录",content:" 关注项目 # 代表项目 # 推荐练手项目 # "}),e.add({id:18,href:"/study-csharp/docs/basic/others/",title:"1.4 其他",section:"第一部分 基础入门",content:" 其他 # "}),e.add({id:19,href:"/study-csharp/docs/advanced/snippet/",title:"2.4 代码片段",section:"第二部分 进阶实战",content:" 代码片段 # "}),e.add({id:20,href:"/study-csharp/docs/advanced/test/",title:"2.5 测试",section:"第二部分 进阶实战",content:" 测试 # "}),e.add({id:21,href:"/study-csharp/docs/basic/others/version/",title:"版本",section:"1.4 其他",content:" 版本 # 版本历史 # "}),e.add({id:22,href:"/study-csharp/docs/advanced/prof/",title:"2.6 性能",section:"第二部分 进阶实战",content:" 性能 # "}),e.add({id:23,href:"/study-csharp/docs/advanced/frame/",title:"2.7 框架",section:"第二部分 进阶实战",content:" 框架 # "}),e.add({id:24,href:"/study-csharp/docs/design/code/",title:"3.7 源码分析",section:"第三部分 设计与实现",content:" 源码分析 # "})})()